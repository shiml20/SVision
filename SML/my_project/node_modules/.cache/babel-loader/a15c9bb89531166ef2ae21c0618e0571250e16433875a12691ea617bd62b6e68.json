{"ast":null,"code":"import { hasOwnProperty, keys } from './object';\nimport { isArray, isDate, isObject } from './inspect'; // Assumes both a and b are arrays!\n// Handles when arrays are \"sparse\" (array.every(...) doesn't handle sparse)\n\nvar compareArrays = function compareArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var equal = true;\n  for (var i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n  return equal;\n};\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n * Returns boolean true or false\n */\n\nexport var looseEqual = function looseEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  var aValidType = isDate(a);\n  var bValidType = isDate(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? compareArrays(a, b) : false;\n  }\n  aValidType = isObject(a);\n  bValidType = isObject(b);\n  if (aValidType || bValidType) {\n    /* istanbul ignore if: this if will probably never be called */\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n    var aKeysCount = keys(a).length;\n    var bKeysCount = keys(b).length;\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n    for (var key in a) {\n      var aHasKey = hasOwnProperty(a, key);\n      var bHasKey = hasOwnProperty(b, key);\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n  return String(a) === String(b);\n};","map":{"version":3,"names":["hasOwnProperty","keys","isArray","isDate","isObject","compareArrays","a","b","length","equal","i","looseEqual","aValidType","bValidType","getTime","aKeysCount","bKeysCount","key","aHasKey","bHasKey","String"],"sources":["E:/flask_learn/my_project/node_modules/bootstrap-vue/esm/utils/loose-equal.js"],"sourcesContent":["import { hasOwnProperty, keys } from './object';\nimport { isArray, isDate, isObject } from './inspect'; // Assumes both a and b are arrays!\n// Handles when arrays are \"sparse\" (array.every(...) doesn't handle sparse)\n\nvar compareArrays = function compareArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var equal = true;\n\n  for (var i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n\n  return equal;\n};\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n * Returns boolean true or false\n */\n\n\nexport var looseEqual = function looseEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  var aValidType = isDate(a);\n  var bValidType = isDate(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? compareArrays(a, b) : false;\n  }\n\n  aValidType = isObject(a);\n  bValidType = isObject(b);\n\n  if (aValidType || bValidType) {\n    /* istanbul ignore if: this if will probably never be called */\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n\n    var aKeysCount = keys(a).length;\n    var bKeysCount = keys(b).length;\n\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n\n    for (var key in a) {\n      var aHasKey = hasOwnProperty(a, key);\n      var bHasKey = hasOwnProperty(b, key);\n\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n\n  return String(a) === String(b);\n};"],"mappings":"AAAA,SAASA,cAAc,EAAEC,IAAI,QAAQ,UAAU;AAC/C,SAASC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,WAAW,CAAC,CAAC;AACvD;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAa,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC/C,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;IACzB,OAAO,KAAK;EACd;EAEA,IAAIC,KAAK,GAAG,IAAI;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAED,KAAK,IAAIC,CAAC,GAAGJ,CAAC,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC1CD,KAAK,GAAGE,UAAU,CAACL,CAAC,CAACI,CAAC,CAAC,EAAEH,CAAC,CAACG,CAAC,CAAC,CAAC;EAChC;EAEA,OAAOD,KAAK;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGA,OAAO,IAAIE,UAAU,GAAG,SAASA,UAAU,CAACL,CAAC,EAAEC,CAAC,EAAE;EAChD,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAIK,UAAU,GAAGT,MAAM,CAACG,CAAC,CAAC;EAC1B,IAAIO,UAAU,GAAGV,MAAM,CAACI,CAAC,CAAC;EAE1B,IAAIK,UAAU,IAAIC,UAAU,EAAE;IAC5B,OAAOD,UAAU,IAAIC,UAAU,GAAGP,CAAC,CAACQ,OAAO,EAAE,KAAKP,CAAC,CAACO,OAAO,EAAE,GAAG,KAAK;EACvE;EAEAF,UAAU,GAAGV,OAAO,CAACI,CAAC,CAAC;EACvBO,UAAU,GAAGX,OAAO,CAACK,CAAC,CAAC;EAEvB,IAAIK,UAAU,IAAIC,UAAU,EAAE;IAC5B,OAAOD,UAAU,IAAIC,UAAU,GAAGR,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAG,KAAK;EAC/D;EAEAK,UAAU,GAAGR,QAAQ,CAACE,CAAC,CAAC;EACxBO,UAAU,GAAGT,QAAQ,CAACG,CAAC,CAAC;EAExB,IAAIK,UAAU,IAAIC,UAAU,EAAE;IAC5B;IACA,IAAI,CAACD,UAAU,IAAI,CAACC,UAAU,EAAE;MAC9B,OAAO,KAAK;IACd;IAEA,IAAIE,UAAU,GAAGd,IAAI,CAACK,CAAC,CAAC,CAACE,MAAM;IAC/B,IAAIQ,UAAU,GAAGf,IAAI,CAACM,CAAC,CAAC,CAACC,MAAM;IAE/B,IAAIO,UAAU,KAAKC,UAAU,EAAE;MAC7B,OAAO,KAAK;IACd;IAEA,KAAK,IAAIC,GAAG,IAAIX,CAAC,EAAE;MACjB,IAAIY,OAAO,GAAGlB,cAAc,CAACM,CAAC,EAAEW,GAAG,CAAC;MACpC,IAAIE,OAAO,GAAGnB,cAAc,CAACO,CAAC,EAAEU,GAAG,CAAC;MAEpC,IAAIC,OAAO,IAAI,CAACC,OAAO,IAAI,CAACD,OAAO,IAAIC,OAAO,IAAI,CAACR,UAAU,CAACL,CAAC,CAACW,GAAG,CAAC,EAAEV,CAAC,CAACU,GAAG,CAAC,CAAC,EAAE;QAC7E,OAAO,KAAK;MACd;IACF;EACF;EAEA,OAAOG,MAAM,CAACd,CAAC,CAAC,KAAKc,MAAM,CAACb,CAAC,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}