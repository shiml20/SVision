{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object';\nimport { getEventRoot } from '../../utils/get-event-root'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n    arg = _ref.arg,\n    value = _ref.value;\n  // Any modifiers are considered target IDs\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\nvar addClickListener = function addClickListener(el, instance) {\n  removeClickListener(el);\n  if (instance) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          getEventRoot(instance).$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\nvar removeRootListeners = function removeRootListeners(el, instance) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && instance) {\n    getEventRoot(instance).$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\nvar addRootListeners = function addRootListeners(el, instance) {\n  removeRootListeners(el, instance);\n  if (instance) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    getEventRoot(instance).$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !getInstanceFromDirective(vnode, binding)) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n  requestAF(function () {\n    addClickListener(el, getInstanceFromDirective(vnode, binding));\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\n * Export our directive\n */\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, getInstanceFromDirective(vnode, binding)); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, getInstanceFromDirective(vnode, binding)); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};","map":{"version":3,"names":["NAME_COLLAPSE","IS_BROWSER","EVENT_OPTIONS_PASSIVE","CODE_ENTER","CODE_SPACE","RX_HASH","RX_HASH_ID","RX_SPACE_SPLIT","arrayIncludes","concat","getInstanceFromDirective","addClass","getAttr","hasAttr","isDisabled","isTag","removeAttr","removeClass","removeStyle","requestAF","setAttr","setStyle","getRootActionEventName","getRootEventName","eventOn","eventOff","isString","looseEqual","keys","getEventRoot","CLASS_BV_TOGGLE_COLLAPSED","CLASS_BV_TOGGLE_NOT_COLLAPSED","BV_BASE","BV_TOGGLE_ROOT_HANDLER","BV_TOGGLE_CLICK_HANDLER","BV_TOGGLE_STATE","BV_TOGGLE_TARGETS","STRING_FALSE","STRING_TRUE","ATTR_ARIA_CONTROLS","ATTR_ARIA_EXPANDED","ATTR_ROLE","ATTR_TABINDEX","STYLE_OVERFLOW_ANCHOR","ROOT_ACTION_EVENT_NAME_TOGGLE","ROOT_EVENT_NAME_STATE","ROOT_EVENT_NAME_SYNC_STATE","ROOT_ACTION_EVENT_NAME_REQUEST_STATE","KEYDOWN_KEY_CODES","isNonStandardTag","el","tagName","toLowerCase","getTargets","_ref","modifiers","arg","value","targets","split","href","test","push","replace","forEach","t","filter","index","arr","indexOf","removeClickListener","handler","addClickListener","instance","event","type","keyCode","target","$emit","removeRootListeners","$off","addRootListeners","id","state","setToggleState","$on","resetProp","prop","handleUpdate","binding","vnode","length","join","VBToggle","bind","componentUpdated","updated","unbind"],"sources":["E:/flask_learn/my_project/node_modules/bootstrap-vue/esm/directives/toggle/toggle.js"],"sourcesContent":["import { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object';\nimport { getEventRoot } from '../../utils/get-event-root'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\n\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n      arg = _ref.arg,\n      value = _ref.value;\n  // Any modifiers are considered target IDs\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\n\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\n\nvar addClickListener = function addClickListener(el, instance) {\n  removeClickListener(el);\n\n  if (instance) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          getEventRoot(instance).$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar removeRootListeners = function removeRootListeners(el, instance) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && instance) {\n    getEventRoot(instance).$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\n\nvar addRootListeners = function addRootListeners(el, instance) {\n  removeRootListeners(el, instance);\n\n  if (instance) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    getEventRoot(instance).$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\n\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !getInstanceFromDirective(vnode, binding)) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n\n  requestAF(function () {\n    addClickListener(el, getInstanceFromDirective(vnode, binding));\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, getInstanceFromDirective(vnode, binding)); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, getInstanceFromDirective(vnode, binding)); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}