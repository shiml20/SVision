{"ast":null,"code":"// String utilities\nimport { RX_HYPHENATE, RX_LOWER_UPPER, RX_REGEXP_REPLACE, RX_START_SPACE_WORD, RX_TRIM_LEFT, RX_TRIM_RIGHT, RX_UNDERSCORE, RX_UN_KEBAB } from '../constants/regex';\nimport { isArray, isPlainObject, isString, isUndefinedOrNull } from './inspect'; // --- Utilities ---\n// Converts PascalCase or camelCase to kebab-case\n\nexport var kebabCase = function kebabCase(str) {\n  return str.replace(RX_HYPHENATE, '-$1').toLowerCase();\n}; // Converts a kebab-case or camelCase string to PascalCase\n\nexport var pascalCase = function pascalCase(str) {\n  str = kebabCase(str).replace(RX_UN_KEBAB, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Converts a string, including strings in camelCase or snake_case, into Start Case\n// It keeps original single quote and hyphen in the word\n// https://github.com/UrbanCompass/to-start-case\n\nexport var startCase = function startCase(str) {\n  return str.replace(RX_UNDERSCORE, ' ').replace(RX_LOWER_UPPER, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(RX_START_SPACE_WORD, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n}; // Lowercases the first letter of a string and returns a new string\n\nexport var lowerFirst = function lowerFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}; // Uppercases the first letter of a string and returns a new string\n\nexport var upperFirst = function upperFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Escape characters to be used in building a regular expression\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return str.replace(RX_REGEXP_REPLACE, '\\\\$&');\n}; // Convert a value to a string that can be rendered\n// `undefined`/`null` will be converted to `''`\n// Plain objects and arrays will be JSON stringified\n\nexport var toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefinedOrNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n}; // Remove leading white space from a string\n\nexport var trimLeft = function trimLeft(str) {\n  return toString(str).replace(RX_TRIM_LEFT, '');\n}; // Remove Trailing white space from a string\n\nexport var trimRight = function trimRight(str) {\n  return toString(str).replace(RX_TRIM_RIGHT, '');\n}; // Remove leading and trailing white space from a string\n\nexport var trim = function trim(str) {\n  return toString(str).trim();\n}; // Lower case a string\n\nexport var lowerCase = function lowerCase(str) {\n  return toString(str).toLowerCase();\n}; // Upper case a string\n\nexport var upperCase = function upperCase(str) {\n  return toString(str).toUpperCase();\n};","map":{"version":3,"names":["RX_HYPHENATE","RX_LOWER_UPPER","RX_REGEXP_REPLACE","RX_START_SPACE_WORD","RX_TRIM_LEFT","RX_TRIM_RIGHT","RX_UNDERSCORE","RX_UN_KEBAB","isArray","isPlainObject","isString","isUndefinedOrNull","kebabCase","str","replace","toLowerCase","pascalCase","_","c","toUpperCase","charAt","slice","startCase","$1","$2","lowerFirst","trim","String","upperFirst","escapeRegExp","toString","val","spaces","arguments","length","undefined","Object","prototype","JSON","stringify","trimLeft","trimRight","lowerCase","upperCase"],"sources":["E:/flask_learn/my_project/node_modules/bootstrap-vue/esm/utils/string.js"],"sourcesContent":["// String utilities\nimport { RX_HYPHENATE, RX_LOWER_UPPER, RX_REGEXP_REPLACE, RX_START_SPACE_WORD, RX_TRIM_LEFT, RX_TRIM_RIGHT, RX_UNDERSCORE, RX_UN_KEBAB } from '../constants/regex';\nimport { isArray, isPlainObject, isString, isUndefinedOrNull } from './inspect'; // --- Utilities ---\n// Converts PascalCase or camelCase to kebab-case\n\nexport var kebabCase = function kebabCase(str) {\n  return str.replace(RX_HYPHENATE, '-$1').toLowerCase();\n}; // Converts a kebab-case or camelCase string to PascalCase\n\nexport var pascalCase = function pascalCase(str) {\n  str = kebabCase(str).replace(RX_UN_KEBAB, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Converts a string, including strings in camelCase or snake_case, into Start Case\n// It keeps original single quote and hyphen in the word\n// https://github.com/UrbanCompass/to-start-case\n\nexport var startCase = function startCase(str) {\n  return str.replace(RX_UNDERSCORE, ' ').replace(RX_LOWER_UPPER, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(RX_START_SPACE_WORD, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n}; // Lowercases the first letter of a string and returns a new string\n\nexport var lowerFirst = function lowerFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}; // Uppercases the first letter of a string and returns a new string\n\nexport var upperFirst = function upperFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Escape characters to be used in building a regular expression\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return str.replace(RX_REGEXP_REPLACE, '\\\\$&');\n}; // Convert a value to a string that can be rendered\n// `undefined`/`null` will be converted to `''`\n// Plain objects and arrays will be JSON stringified\n\nexport var toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefinedOrNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n}; // Remove leading white space from a string\n\nexport var trimLeft = function trimLeft(str) {\n  return toString(str).replace(RX_TRIM_LEFT, '');\n}; // Remove Trailing white space from a string\n\nexport var trimRight = function trimRight(str) {\n  return toString(str).replace(RX_TRIM_RIGHT, '');\n}; // Remove leading and trailing white space from a string\n\nexport var trim = function trim(str) {\n  return toString(str).trim();\n}; // Lower case a string\n\nexport var lowerCase = function lowerCase(str) {\n  return toString(str).toLowerCase();\n}; // Upper case a string\n\nexport var upperCase = function upperCase(str) {\n  return toString(str).toUpperCase();\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}