{"ast":null,"code":"import { arrayIncludes } from '../../../utils/array';\nimport { isArray, isFunction } from '../../../utils/inspect';\nimport { clone, keys, pick } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nexport var sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // We first need to format the row based on the field configurations\n  // This ensures that we add formatted values for keys that may not\n  // exist in the row itself\n  var formattedRow = keys(fieldsObj).reduce(function (result, key) {\n    var field = fieldsObj[key];\n    var filterByFormatted = field.filterByFormatted;\n    var formatter = isFunction(filterByFormatted) ? /* istanbul ignore next */\n    filterByFormatted : filterByFormatted ? /* istanbul ignore next */\n    field.formatter : null;\n    if (isFunction(formatter)) {\n      result[key] = formatter(row[key], key, row);\n    }\n    return result;\n  }, clone(row)); // Determine the allowed keys:\n  //   - Ignore special fields that start with `_`\n  //   - Ignore fields in the `ignoreFields` array\n  //   - Include only fields in the `includeFields` array\n\n  var allowedKeys = keys(formattedRow).filter(function (key) {\n    return !IGNORED_FIELD_KEYS[key] && !(isArray(ignoreFields) && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(isArray(includeFields) && includeFields.length > 0 && !arrayIncludes(includeFields, key));\n  });\n  return pick(formattedRow, allowedKeys);\n};","map":{"version":3,"names":["arrayIncludes","isArray","isFunction","clone","keys","pick","IGNORED_FIELD_KEYS","sanitizeRow","row","ignoreFields","includeFields","fieldsObj","arguments","length","undefined","formattedRow","reduce","result","key","field","filterByFormatted","formatter","allowedKeys","filter"],"sources":["E:/flask_learn/my_project/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js"],"sourcesContent":["import { arrayIncludes } from '../../../utils/array';\nimport { isArray, isFunction } from '../../../utils/inspect';\nimport { clone, keys, pick } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nexport var sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // We first need to format the row based on the field configurations\n  // This ensures that we add formatted values for keys that may not\n  // exist in the row itself\n  var formattedRow = keys(fieldsObj).reduce(function (result, key) {\n    var field = fieldsObj[key];\n    var filterByFormatted = field.filterByFormatted;\n    var formatter = isFunction(filterByFormatted) ?\n    /* istanbul ignore next */\n    filterByFormatted : filterByFormatted ?\n    /* istanbul ignore next */\n    field.formatter : null;\n\n    if (isFunction(formatter)) {\n      result[key] = formatter(row[key], key, row);\n    }\n\n    return result;\n  }, clone(row)); // Determine the allowed keys:\n  //   - Ignore special fields that start with `_`\n  //   - Ignore fields in the `ignoreFields` array\n  //   - Include only fields in the `includeFields` array\n\n  var allowedKeys = keys(formattedRow).filter(function (key) {\n    return !IGNORED_FIELD_KEYS[key] && !(isArray(ignoreFields) && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(isArray(includeFields) && includeFields.length > 0 && !arrayIncludes(includeFields, key));\n  });\n  return pick(formattedRow, allowedKeys);\n};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,OAAO,EAAEC,UAAU,QAAQ,wBAAwB;AAC5D,SAASC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,uBAAuB;AACzD,SAASC,kBAAkB,QAAQ,aAAa,CAAC,CAAC;;AAElD,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAW,CAACC,GAAG,EAAEC,YAAY,EAAEC,aAAa,EAAE;EAC9E,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtF;EACA;EACA;EACA,IAAIG,YAAY,GAAGX,IAAI,CAACO,SAAS,CAAC,CAACK,MAAM,CAAC,UAAUC,MAAM,EAAEC,GAAG,EAAE;IAC/D,IAAIC,KAAK,GAAGR,SAAS,CAACO,GAAG,CAAC;IAC1B,IAAIE,iBAAiB,GAAGD,KAAK,CAACC,iBAAiB;IAC/C,IAAIC,SAAS,GAAGnB,UAAU,CAACkB,iBAAiB,CAAC,GAC7C;IACAA,iBAAiB,GAAGA,iBAAiB,GACrC;IACAD,KAAK,CAACE,SAAS,GAAG,IAAI;IAEtB,IAAInB,UAAU,CAACmB,SAAS,CAAC,EAAE;MACzBJ,MAAM,CAACC,GAAG,CAAC,GAAGG,SAAS,CAACb,GAAG,CAACU,GAAG,CAAC,EAAEA,GAAG,EAAEV,GAAG,CAAC;IAC7C;IAEA,OAAOS,MAAM;EACf,CAAC,EAAEd,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB;EACA;EACA;;EAEA,IAAIc,WAAW,GAAGlB,IAAI,CAACW,YAAY,CAAC,CAACQ,MAAM,CAAC,UAAUL,GAAG,EAAE;IACzD,OAAO,CAACZ,kBAAkB,CAACY,GAAG,CAAC,IAAI,EAAEjB,OAAO,CAACQ,YAAY,CAAC,IAAIA,YAAY,CAACI,MAAM,GAAG,CAAC,IAAIb,aAAa,CAACS,YAAY,EAAES,GAAG,CAAC,CAAC,IAAI,EAAEjB,OAAO,CAACS,aAAa,CAAC,IAAIA,aAAa,CAACG,MAAM,GAAG,CAAC,IAAI,CAACb,aAAa,CAACU,aAAa,EAAEQ,GAAG,CAAC,CAAC;EAC3N,CAAC,CAAC;EACF,OAAOb,IAAI,CAACU,YAAY,EAAEO,WAAW,CAAC;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}