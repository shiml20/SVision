{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive } from 'vue';\n/* eslint-disable */\n\n// 定义要渲染到页面的初始数据\n\nexport default {\n  __name: 'UserStore',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const tableData = reactive([{\n      id: \"201300001\",\n      name: '农夫山泉',\n      price: \"1.2\",\n      LoadingDate: \"2013-01-07\",\n      isSold: \"true\"\n    }, {\n      id: \"201300002\",\n      name: '百岁山',\n      price: \"3.5\",\n      LoadingDate: \"2014-09-21\",\n      isSold: \"true\"\n    }, {\n      id: \"201300003\",\n      name: '棒棒糖',\n      price: \"1.5\",\n      LoadingDate: \"2015-02-01\",\n      isSold: \"false\"\n    }, {\n      id: \"201300004\",\n      name: '冰激凌',\n      price: \"8\",\n      LoadingDate: \"2019-06-13\",\n      isSold: \"true\"\n    }, {\n      id: \"201300005\",\n      name: '蛋糕',\n      price: \"66\",\n      LoadingDate: \"2021-11-12\",\n      isSold: \"false\"\n    }]);\n\n    // 文本框双向绑定的值\n    const productInfo = reactive({\n      id: \"\",\n      name: \"\",\n      price: \"\",\n      LoadingDate: \"\",\n      isSold: \"\"\n    });\n\n    // 删除功能，传索引行数\n    //   function del(index: number) {\n    //       tableData.splice(index, 1)\n    //   }\n\n    // 添加功能\n    function add() {\n      // 定义对象，存储从文本框获取到的数据\n      const addArray = {\n        id: productInfo.id,\n        name: productInfo.name,\n        price: productInfo.price,\n        LoadingDate: productInfo.LoadingDate,\n        isSold: productInfo.isSold\n      };\n      // push方法，添加一条数据到初始数据的数组中\n      tableData.push(addArray);\n    }\n\n    // 点击表格上的修改按钮，把该行信息显示到文本框里\n    // 传该行的下标（index）与该行（row）信息过来，渲染文本框\n    // 注意：要是index参数虽然在这里看似没有用上，但是不写index参数会不实现功能的！！！！\n    //   function show(index:number,row:any){\n    //       productInfo.id = row.id;\n    //       productInfo.name = row.name;\n    //       productInfo.price = row.price;\n    //       productInfo.LoadingDate = row.LoadingDate;\n    //       productInfo.isSold = row.isSold;\n    //   }\n\n    // 修改功能\n    function update() {\n      // 也是一样的定义一个对象，用于存储文本框的数据\n      const updateArray = {\n        id: productInfo.id,\n        name: productInfo.name,\n        price: productInfo.price,\n        LoadingDate: productInfo.LoadingDate,\n        isSold: productInfo.isSold\n      };\n      // 返回传入一个测试条件（函数）符合条件的数组第一个元素位置。\n      // 大意就是：传入一个参数（id），让id与文本框里的id对比，找到两个id相同的哪个元素，保存\n      const index = tableData.findIndex(o => o.id === updateArray.id);\n      // 然后删掉index找到的那一条元素，先删，然后再添加文本框里面的数据到数组中\n      // splice方法的第三个参数是添加一条新元素到数组里\n      tableData.splice(index, 1, updateArray);\n    }\n    const __returned__ = {\n      tableData,\n      productInfo,\n      add,\n      update,\n      reactive\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":";AA0CA,SAASA,QAAQ,QAAQ,KAAK;AAC9B;;AAEM;;;;;;;;IACA,MAAMC,SAAS,GAAGD,QAAQ,CAAC,CACvB;MACIE,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,YAAY;MACzBC,MAAM,EAAE;IACZ,CAAC,EACD;MACIJ,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,YAAY;MACzBC,MAAM,EAAE;IACZ,CAAC,EACD;MACIJ,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,YAAY;MACzBC,MAAM,EAAE;IACZ,CAAC,EACD;MACIJ,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,GAAG;MACVC,WAAW,EAAE,YAAY;MACzBC,MAAM,EAAE;IACZ,CAAC,EACD;MACIJ,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,WAAW,EAAE,YAAY;MACzBC,MAAM,EAAE;IACZ,CAAC,CACJ,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGP,QAAQ,CAAC;MAAEE,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAG,EAAE;MAAEC,KAAK,EAAG,EAAE;MAAEC,WAAW,EAAG,EAAE;MAAEC,MAAM,EAAG;IAAI,CAAC,CAAC;;IAE/F;IACF;IACA;IACA;;IAEE;IACA,SAASE,GAAG,GAAG;MACX;MACA,MAAMC,QAAQ,GAAG;QACbP,EAAE,EAAEK,WAAW,CAACL,EAAE;QAClBC,IAAI,EAAEI,WAAW,CAACJ,IAAI;QACtBC,KAAK,EAAEG,WAAW,CAACH,KAAK;QACxBC,WAAW,EAAEE,WAAW,CAACF,WAAW;QACpCC,MAAM,EAAEC,WAAW,CAACD;MACxB,CAAC;MACD;MACAL,SAAS,CAACS,IAAI,CAACD,QAAQ,CAAC;IAC5B;;IAEA;IACA;IACA;IACF;IACA;IACA;IACA;IACA;IACA;IACA;;IAEE;IACA,SAASE,MAAM,GAAG;MACd;MACA,MAAMC,WAAW,GAAG;QAChBV,EAAE,EAAEK,WAAW,CAACL,EAAE;QAClBC,IAAI,EAAEI,WAAW,CAACJ,IAAI;QACtBC,KAAK,EAAEG,WAAW,CAACH,KAAK;QACxBC,WAAW,EAAEE,WAAW,CAACF,WAAW;QACpCC,MAAM,EAAEC,WAAW,CAACD;MACxB,CAAC;MACD;MACA;MACA,MAAMO,KAAK,GAAGZ,SAAS,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKU,WAAW,CAACV,EAAE,CAAC;MAC/D;MACA;MACAD,SAAS,CAACe,MAAM,CAACH,KAAK,EAAE,CAAC,EAAED,WAAW,CAAC;IACzC","names":["reactive","tableData","id","name","price","LoadingDate","isSold","productInfo","add","addArray","push","update","updateArray","index","findIndex","o","splice"],"sources":["E:/flask_learn/my_project/src/components/UserStore.vue"],"sourcesContent":["<template >\r\n  <h2>商品管理</h2>\r\n  <div id=\"big\">\r\n      <!-- 导入element框架的表格 -->\r\n      <el-table :data=\"tableData\" border style=\"width: 100%\">\r\n          <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\r\n          <el-table-column prop=\"id\" label=\"商品编号\" align=\"center\" />\r\n          <el-table-column prop=\"name\" label=\"名称\" align=\"center\" />\r\n          <el-table-column prop=\"price\" label=\"价格\" align=\"center\" />\r\n          <el-table-column prop=\"LoadingDate\" label=\"上货日期\" align=\"center\" />\r\n          <el-table-column prop=\"isSold\" label=\"是否下架\" align=\"center\" #default=\"scope\">\r\n              <input type=\"checkbox\" v-model=\"scope.row.isSold\">\r\n          </el-table-column>\r\n\r\n\r\n      </el-table>\r\n  </div>\r\n\r\n  <!-- 模式窗口 -->\r\n  <fieldset>\r\n      <legend>商品详情</legend>\r\n      商品编号：<input type=\"text\" placeholder=\"请输入商品编号\" v-model=\"productInfo.id\">\r\n      <br /><br />\r\n      商品名称：<input type=\"text\" placeholder=\"请输入商品名称\" v-model=\"productInfo.name\">\r\n      <br /><br />\r\n      商品价格：<input type=\"number\" placeholder=\"请输入商品价格\" v-model=\"productInfo.price\">\r\n      <br /><br />\r\n      上货日期：<input type=\"date\" v-model=\"productInfo.LoadingDate\">\r\n      <br /><br />\r\n      是否下架：<input type=\"radio\" value=\"true\" name=\"dates\" v-model=\"productInfo.isSold\"> 是\r\n      <input type=\"radio\" value=\"false\" name=\"dates\" checked v-model=\"productInfo.isSold\"> 否\r\n      <br /><br />\r\n\r\n      <el-button type=\"success\" @click=\"add()\">添加</el-button>\r\n      <el-button type=\"primary\" @click=\"update()\">修改</el-button>\r\n      <el-button type=\"danger\">批量删除</el-button>\r\n\r\n  </fieldset>\r\n\r\n</template>\r\n<script setup>\r\n\r\nimport { reactive } from 'vue';\r\n/* eslint-disable */\r\n\r\n      // 定义要渲染到页面的初始数据\r\n      const tableData = reactive([\r\n          {\r\n              id: \"201300001\",\r\n              name: '农夫山泉',\r\n              price: \"1.2\",\r\n              LoadingDate: \"2013-01-07\",\r\n              isSold: \"true\"\r\n          },\r\n          {\r\n              id: \"201300002\",\r\n              name: '百岁山',\r\n              price: \"3.5\",\r\n              LoadingDate: \"2014-09-21\",\r\n              isSold: \"true\"\r\n          },\r\n          {\r\n              id: \"201300003\",\r\n              name: '棒棒糖',\r\n              price: \"1.5\",\r\n              LoadingDate: \"2015-02-01\",\r\n              isSold: \"false\"\r\n          },\r\n          {\r\n              id: \"201300004\",\r\n              name: '冰激凌',\r\n              price: \"8\",\r\n              LoadingDate: \"2019-06-13\",\r\n              isSold: \"true\"\r\n          },\r\n          {\r\n              id: \"201300005\",\r\n              name: '蛋糕',\r\n              price: \"66\",\r\n              LoadingDate: \"2021-11-12\",\r\n              isSold: \"false\"\r\n          },\r\n      ])\r\n      \r\n      // 文本框双向绑定的值\r\n      const productInfo = reactive({ id: \"\", name:  \"\", price:  \"\", LoadingDate:  \"\", isSold:  \"\", })\r\n\r\n      // 删除功能，传索引行数\r\n    //   function del(index: number) {\r\n    //       tableData.splice(index, 1)\r\n    //   }\r\n\r\n      // 添加功能\r\n      function add() {\r\n          // 定义对象，存储从文本框获取到的数据\r\n          const addArray = {\r\n              id: productInfo.id,\r\n              name: productInfo.name,\r\n              price: productInfo.price,\r\n              LoadingDate: productInfo.LoadingDate,\r\n              isSold: productInfo.isSold,\r\n          }\r\n          // push方法，添加一条数据到初始数据的数组中\r\n          tableData.push(addArray);\r\n      }\r\n\r\n      // 点击表格上的修改按钮，把该行信息显示到文本框里\r\n      // 传该行的下标（index）与该行（row）信息过来，渲染文本框\r\n      // 注意：要是index参数虽然在这里看似没有用上，但是不写index参数会不实现功能的！！！！\r\n    //   function show(index:number,row:any){\r\n    //       productInfo.id = row.id;\r\n    //       productInfo.name = row.name;\r\n    //       productInfo.price = row.price;\r\n    //       productInfo.LoadingDate = row.LoadingDate;\r\n    //       productInfo.isSold = row.isSold;\r\n    //   }\r\n\r\n      // 修改功能\r\n      function update() {\r\n          // 也是一样的定义一个对象，用于存储文本框的数据\r\n          const updateArray = {\r\n              id: productInfo.id,\r\n              name: productInfo.name,\r\n              price: productInfo.price,\r\n              LoadingDate: productInfo.LoadingDate,\r\n              isSold: productInfo.isSold,\r\n          }\r\n          // 返回传入一个测试条件（函数）符合条件的数组第一个元素位置。\r\n          // 大意就是：传入一个参数（id），让id与文本框里的id对比，找到两个id相同的哪个元素，保存\r\n          const index = tableData.findIndex(o => o.id === updateArray.id);\r\n          // 然后删掉index找到的那一条元素，先删，然后再添加文本框里面的数据到数组中\r\n          // splice方法的第三个参数是添加一条新元素到数组里\r\n          tableData.splice(index, 1, updateArray)\r\n        }\r\n        \r\n</script>\r\n<style scoped>\r\nh2 {\r\n  text-align: center;\r\n}\r\n\r\n#big {\r\n  width: 80%;\r\n  margin: auto;\r\n}\r\n\r\nfieldset {\r\n  width: 40%;\r\n  margin-left: 10%;\r\n  margin-top: 30px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}