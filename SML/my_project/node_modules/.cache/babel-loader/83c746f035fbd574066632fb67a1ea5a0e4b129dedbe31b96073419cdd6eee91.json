{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { extend } from '../../../vue';\nimport { EVENT_NAME_CONTEXT_CHANGED, EVENT_NAME_FILTERED, EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_SELECTED } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../../constants/props';\nimport { arrayIncludes, createArray } from '../../../utils/array';\nimport { identity } from '../../../utils/identity';\nimport { isArray, isNumber } from '../../../utils/inspect';\nimport { looseEqual } from '../../../utils/loose-equal';\nimport { mathMax, mathMin } from '../../../utils/math';\nimport { makeProp } from '../../../utils/props';\nimport { toString } from '../../../utils/string';\nimport { sanitizeRow } from './sanitize-row'; // --- Constants ---\n\nvar SELECT_MODES = ['range', 'multi', 'single'];\nvar ROLE_GRID = 'grid'; // --- Props ---\n\nexport var props = {\n  // Disable use of click handlers for row selection\n  noSelectOnClick: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectMode: makeProp(PROP_TYPE_STRING, 'multi', function (value) {\n    return arrayIncludes(SELECT_MODES, value);\n  }),\n  selectable: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectedVariant: makeProp(PROP_TYPE_STRING, 'active')\n}; // --- Mixin ---\n// @vue/component\n\nexport var selectableMixin = extend({\n  props: props,\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    hasSelectableRowClick: function hasSelectableRowClick() {\n      return this.isSelectable && !this.noSelectOnClick;\n    },\n    supportsSelectableRows: function supportsSelectableRows() {\n      return true;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      var selectedRows = this.selectedRows;\n      return this.isSelectable && selectedRows && selectedRows.length > 0 && selectedRows.some(identity);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n      var isSelectable = this.isSelectable;\n      return _ref = {\n        'b-table-selectable': isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', isSelectable && !this.hasSelectableRowClick), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      if (!this.isSelectable) {\n        return {};\n      }\n      var role = this.bvAttrs.role || ROLE_GRID;\n      return {\n        role: role,\n        // TODO:\n        //   Should this attribute not be included when `no-select-on-click` is set\n        //   since this attribute implies keyboard navigation?\n        'aria-multiselectable': role === ROLE_GRID ? toString(this.selectableIsMultiSelect) : null\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newValue, oldValue) {\n      // Reset for selectable\n      var equal = false;\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newValue) && isArray(oldValue) && newValue.length === oldValue.length;\n        for (var i = 0; equal && i < newValue.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newValue[i]), sanitizeRow(oldValue[i]));\n        }\n      }\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(newValue);\n    },\n    selectMode: function selectMode() {\n      this.clearSelected();\n    },\n    hasSelectableRowClick: function hasSelectableRowClick(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(!newValue);\n    },\n    selectedRows: function selectedRows(_selectedRows, oldValue) {\n      var _this = this;\n      if (this.isSelectable && !looseEqual(_selectedRows, oldValue)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n        this.$emit(EVENT_NAME_ROW_SELECTED, items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers if needed\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? createArray(length, true) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return !!(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      }\n      return {};\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method](EVENT_NAME_ROW_CLICKED, this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method](EVENT_NAME_FILTERED, this.clearSelected);\n      this[method](EVENT_NAME_CONTEXT_CHANGED, this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, event) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable || this.noSelectOnClick) {\n        // Don't do anything if table is not in selectable mode\n        this.clearSelected();\n        return;\n      }\n      var selectMode = this.selectMode,\n        selectedLastRow = this.selectedLastRow;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (selectedLastRow > -1 && event.shiftKey) {\n          // range\n          for (var idx = mathMin(selectedLastRow, index); idx <= mathMax(selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n          selected = true;\n        } else {\n          if (!(event.ctrlKey || event.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n          if (selected) this.selectedLastRow = index;\n        }\n      }\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","extend","EVENT_NAME_CONTEXT_CHANGED","EVENT_NAME_FILTERED","EVENT_NAME_ROW_CLICKED","EVENT_NAME_ROW_SELECTED","PROP_TYPE_BOOLEAN","PROP_TYPE_STRING","arrayIncludes","createArray","identity","isArray","isNumber","looseEqual","mathMax","mathMin","makeProp","toString","sanitizeRow","SELECT_MODES","ROLE_GRID","props","noSelectOnClick","selectMode","selectable","selectedVariant","selectableMixin","data","selectedRows","selectedLastRow","computed","isSelectable","hasSelectableRowClick","supportsSelectableRows","selectableHasSelection","length","some","selectableIsMultiSelect","selectableTableClasses","_ref","concat","selectableTableAttrs","role","bvAttrs","watch","computedItems","newValue","oldValue","equal","i","clearSelected","setSelectionHandlers","_selectedRows","_this","items","forEach","v","idx","push","$emit","beforeMount","methods","selectRow","index","isRowSelected","slice","selectedLastClicked","unselectRow","selectAllRows","selectableRowClasses","variant","dark","selectableRowAttrs","on","method","selectionHandler","item","event","selected","shiftKey","ctrlKey","metaKey"],"sources":["E:/flask_learn/my_project/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-selectable.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extend } from '../../../vue';\nimport { EVENT_NAME_CONTEXT_CHANGED, EVENT_NAME_FILTERED, EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_SELECTED } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../../constants/props';\nimport { arrayIncludes, createArray } from '../../../utils/array';\nimport { identity } from '../../../utils/identity';\nimport { isArray, isNumber } from '../../../utils/inspect';\nimport { looseEqual } from '../../../utils/loose-equal';\nimport { mathMax, mathMin } from '../../../utils/math';\nimport { makeProp } from '../../../utils/props';\nimport { toString } from '../../../utils/string';\nimport { sanitizeRow } from './sanitize-row'; // --- Constants ---\n\nvar SELECT_MODES = ['range', 'multi', 'single'];\nvar ROLE_GRID = 'grid'; // --- Props ---\n\nexport var props = {\n  // Disable use of click handlers for row selection\n  noSelectOnClick: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectMode: makeProp(PROP_TYPE_STRING, 'multi', function (value) {\n    return arrayIncludes(SELECT_MODES, value);\n  }),\n  selectable: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectedVariant: makeProp(PROP_TYPE_STRING, 'active')\n}; // --- Mixin ---\n// @vue/component\n\nexport var selectableMixin = extend({\n  props: props,\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    hasSelectableRowClick: function hasSelectableRowClick() {\n      return this.isSelectable && !this.noSelectOnClick;\n    },\n    supportsSelectableRows: function supportsSelectableRows() {\n      return true;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      var selectedRows = this.selectedRows;\n      return this.isSelectable && selectedRows && selectedRows.length > 0 && selectedRows.some(identity);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var isSelectable = this.isSelectable;\n      return _ref = {\n        'b-table-selectable': isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', isSelectable && !this.hasSelectableRowClick), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      if (!this.isSelectable) {\n        return {};\n      }\n\n      var role = this.bvAttrs.role || ROLE_GRID;\n      return {\n        role: role,\n        // TODO:\n        //   Should this attribute not be included when `no-select-on-click` is set\n        //   since this attribute implies keyboard navigation?\n        'aria-multiselectable': role === ROLE_GRID ? toString(this.selectableIsMultiSelect) : null\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newValue, oldValue) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newValue) && isArray(oldValue) && newValue.length === oldValue.length;\n\n        for (var i = 0; equal && i < newValue.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newValue[i]), sanitizeRow(oldValue[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(newValue);\n    },\n    selectMode: function selectMode() {\n      this.clearSelected();\n    },\n    hasSelectableRowClick: function hasSelectableRowClick(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(!newValue);\n    },\n    selectedRows: function selectedRows(_selectedRows, oldValue) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldValue)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit(EVENT_NAME_ROW_SELECTED, items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers if needed\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? createArray(length, true) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return !!(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      }\n\n      return {};\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method](EVENT_NAME_ROW_CLICKED, this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method](EVENT_NAME_FILTERED, this.clearSelected);\n      this[method](EVENT_NAME_CONTEXT_CHANGED, this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, event) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable || this.noSelectOnClick) {\n        // Don't do anything if table is not in selectable mode\n        this.clearSelected();\n        return;\n      }\n\n      var selectMode = this.selectMode,\n          selectedLastRow = this.selectedLastRow;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (selectedLastRow > -1 && event.shiftKey) {\n          // range\n          for (var idx = mathMin(selectedLastRow, index); idx <= mathMax(selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(event.ctrlKey || event.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          if (selected) this.selectedLastRow = index;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}